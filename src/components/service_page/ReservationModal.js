// üìÅ src/components/ServicePage/ReservationModal.jsx
import React from 'react';
import { Form, Button, Spinner } from 'react-bootstrap';
import './ReservationModal.css';

const ReservationModal = ({
  step,
  setStep,
  userData,
  setUserData,
  selected,
  selectedType,
  subscriptionType,
  selectedPlan,
  activities,
  totalPrice,
  serviceType,
  isSubmitting,
  setIsSubmitting,
  showValidation,
  setShowValidation,
  emailValid,
  setEmailValid,
  phoneValid,
  setPhoneValid,
  apiBaseUrl,
  resetState
}) => {

  const isFormValid = () => {
    const emailPattern = /.+@.+\..+/;
    const phonePattern = /^\d{10}$/;
    const emailCheck = emailPattern.test(userData.email);
    const phoneCheck = phonePattern.test(userData.phone);
    setEmailValid(emailCheck);
    setPhoneValid(phoneCheck);
    return (
      userData.name.trim() &&
      userData.email.trim() &&
      userData.phone.trim() &&
      userData.address.trim() &&
      userData.date &&
      userData.time &&
      emailCheck &&
      phoneCheck
    );
  };

  const handleSubmit = async () => {
    try {
      setIsSubmitting(true);
      const payload = {
        ...userData,
        flat_type: selectedType,
        subscription: subscriptionType,
        plan: selectedPlan === 'custom' ? null : selectedPlan.name,
        activities: selectedPlan === 'custom' ? selected : [],
        total_price: selectedPlan === 'custom' ? totalPrice : selectedPlan.prices[selectedType][subscriptionType],
        service_type: serviceType
      };

      const res = await fetch(`${apiBaseUrl}/reservations`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
        body: JSON.stringify(payload)
      });

      if (!res.ok) throw new Error('API error');
      await res.json();
      setStep('success');
    } catch (err) {
      alert('–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ—Ç–æ –Ω–∞ –∑–∞—è–≤–∫–∞—Ç–∞.');
      console.error(err);
    } finally {
      setIsSubmitting(false);
    }
  };

  if (!['form', 'confirm', 'success'].includes(step)) return null;

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        {step === 'form' && (
          <Form>
            <h4 className="mb-4">–í–∞—à–∏—Ç–µ –¥–∞–Ω–Ω–∏</h4>
            {['name', 'email', 'phone', 'address'].map((field, i) => (
              <Form.Group key={i} className="mb-3">
                <Form.Label>{field.charAt(0).toUpperCase() + field.slice(1)} *</Form.Label>
                <Form.Control
                  type={field === 'email' ? 'email' : 'text'}
                  value={userData[field]}
                  onChange={(e) => setUserData({ ...userData, [field]: e.target.value })}
                  isInvalid={
                    showValidation &&
                    (userData[field].trim() === '' ||
                      (field === 'email' && !emailValid) ||
                      (field === 'phone' && !phoneValid))
                  }
                />
                {showValidation && userData[field].trim() === '' && (
                  <Form.Control.Feedback type="invalid">–ü–æ–ª–µ—Ç–æ –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ</Form.Control.Feedback>
                )}
                {showValidation && field === 'email' && userData.email.trim() !== '' && !emailValid && (
                  <Form.Text className="text-danger">–ù–µ–≤–∞–ª–∏–¥–µ–Ω –∏–º–µ–π–ª –∞–¥—Ä–µ—Å</Form.Text>
                )}
                {showValidation && field === 'phone' && userData.phone.trim() !== '' && !phoneValid && (
                  <Form.Text className="text-danger">–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∏—è—Ç –Ω–æ–º–µ—Ä —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä–¥—ä—Ä–∂–∞ —Ç–æ—á–Ω–æ 10 —Ü–∏—Ñ—Ä–∏</Form.Text>
                )}
              </Form.Group>
            ))}
            <Form.Group className="mb-3">
              <Form.Label>–ñ–µ–ª–∞–Ω–∞ –¥–∞—Ç–∞ *</Form.Label>
              <Form.Control
                type="date"
                value={userData.date || ''}
                onChange={(e) => setUserData({ ...userData, date: e.target.value })}
                isInvalid={showValidation && !userData.date}
              />
              <Form.Control.Feedback type="invalid">–ü–æ–ª–µ—Ç–æ –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ</Form.Control.Feedback>
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>–ß–∞—Å *</Form.Label>
              <Form.Control
                type="time"
                value={userData.time || ''}
                onChange={(e) => setUserData({ ...userData, time: e.target.value })}
                isInvalid={showValidation && !userData.time}
              />
              <Form.Control.Feedback type="invalid">–ü–æ–ª–µ—Ç–æ –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ</Form.Control.Feedback>
            </Form.Group>
            <Form.Group className="mb-4">
              <Form.Label>–î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</Form.Label>
              <Form.Control as="textarea" rows={3} value={userData.info} onChange={(e) => setUserData({ ...userData, info: e.target.value })} />
            </Form.Group>
            <div className="buttons-container">
              <Button variant="secondary" onClick={() => setStep('main')}>–ù–∞–∑–∞–¥</Button>
              <Button variant="success" onClick={() => {
                setShowValidation(true);
                if (isFormValid()) setStep('confirm');
              }}>–ù–∞–ø—Ä–µ–¥</Button>
            </div>
          </Form>
        )}

        {step === 'confirm' && (
          <div>
            <h4 className="mb-4">–ü–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –∑–∞—è–≤–∫–∞—Ç–∞</h4>
            <p><strong>–ò–º–µ:</strong> {userData.name}</p>
            <p><strong>Email:</strong> {userData.email}</p>
            <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {userData.phone}</p>
            <p><strong>–ê–¥—Ä–µ—Å:</strong> {userData.address}</p>
            <p><strong>–î–∞—Ç–∞:</strong> {userData.date}</p>
            <p><strong>–ß–∞—Å:</strong> {userData.time}</p>
            <p><strong>–ò–Ω—Ñ–æ:</strong> {userData.info || '–ù—è–º–∞'}</p>
            <p><strong>–¢–∏–ø:</strong> {selectedType}</p>
            <p><strong>–¢–∏–ø –æ–±—Å–ª—É–∂–≤–∞–Ω–µ:</strong> {subscriptionType}</p>
            {selectedPlan === 'custom' ? (
              <>
                <p><strong>–ò–∑–±—Ä–∞–Ω–∏ —É—Å–ª—É–≥–∏:</strong></p>
                <ul>
                  {selected.map((name, i) => (
                    <li key={i}>{name} ‚Äî {activities.find(a => a.name === name)?.prices[selectedType][subscriptionType]} –ª–≤</li>
                  ))}
                </ul>
                <p><strong>–û–±—â–∞ —Ü–µ–Ω–∞:</strong> {totalPrice} –ª–≤</p>
              </>
            ) : (
              <>
                <p><strong>–ü–ª–∞–Ω:</strong> {selectedPlan.name}</p>
                <p><strong>–¶–µ–Ω–∞:</strong> {selectedPlan.prices[selectedType][subscriptionType]} –ª–≤</p>
              </>
            )}
            <div className="d-flex justify-content-between mt-4">
              <Button variant="secondary" onClick={() => setStep('form')}>–ù–∞–∑–∞–¥</Button>
              <Button variant="success" disabled={isSubmitting} onClick={handleSubmit}>
                {isSubmitting ? (<Spinner animation="border" size="sm" />) : '–ü–æ—Ç–≤—ä—Ä–¥–∏'}
              </Button>
            </div>
          </div>
        )}

        {step === 'success' && (
          <div>
            <h4 className="mb-4 text-success">–ó–∞—è–≤–∫–∞—Ç–∞ –µ –∏–∑–ø—Ä–∞—Ç–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</h4>
            <p>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∏, {userData.name}. –©–µ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –ø–æ –∏–º–µ–π–ª –Ω–∞ <strong>{userData.email}</strong>.</p>
            <div className="text-center mt-4">
              <Button variant="dark" onClick={resetState}>–ó–∞—Ç–≤–æ—Ä–∏</Button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ReservationModal;
